<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.candorgrc.idfusion</groupId>
	<artifactId>idf-uxui-sandbox</artifactId>
	<packaging>war</packaging>
	<version>1.0.0-SNAPSHOT</version>
	<name>idFusionâ„¢ UX/UI Sandbox</name>

	<description>
		MVP client web application exposing a small set of features in order to provide the means for the UX/UI
		developer/designer peers collaboration.
	</description>
	<developers>
		<developer>
			<id>bp</id>
			<name>Bogdan-George Petridean</name>
			<url>https://www.linkedin.com/in/bogdan-petridean/</url>
		</developer>
	</developers>
	<licenses>
		<license>
			<distribution>All Rights Reserved.</distribution>
		</license>
	</licenses>
	<url>http://127.0.0.1:8080/sandbox.html</url>
	<inceptionYear>2018</inceptionYear>
	<organization>
		<name>VeracityID, Inc.</name>
		<url>https://www.veracityid.com/</url>
	</organization>

	<properties>
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jdk.version>11</jdk.version>

		<gwt.version>2.10.0</gwt.version>
		<gin.version>3.0.0</gin.version>
		<elemental2.version>1.1.0</elemental2.version>

		<gwt.plugin.version>2.10.0</gwt.plugin.version>
		<compiler.plugin.version>3.10.1</compiler.plugin.version>
		<source.plugin.version>3.2.1</source.plugin.version>
		<exec.plugin.version>3.1.0</exec.plugin.version>
		<resources.plugin.version>3.3.0</resources.plugin.version>
		<war.plugin.version>3.3.2</war.plugin.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.gwtproject</groupId>
				<artifactId>gwt</artifactId>
				<version>${gwt.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.google.elemental2</groupId>
				<artifactId>elemental2-dom</artifactId>
				<version>${elemental2.version}</version>
			</dependency>
			<dependency>
				<groupId>io.github.gwtplus.gin</groupId>
				<artifactId>gin</artifactId>
				<version>${gin.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.gwtproject</groupId>
			<artifactId>gwt-user</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.gwtproject</groupId>
			<artifactId>gwt-dev</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.github.gwtplus.gin</groupId>
			<artifactId>gin</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.elemental2</groupId>
			<artifactId>elemental2-dom</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Output classes directly into the webapp, so that IDEs and "mvn process-classes" update them in DevMode -->
		<outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

		<plugins>

			<!-- Mojo's Maven Plugin for GWT -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>${gwt.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>i18n</goal>
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
				<configuration>
					<runTarget>sandbox.html</runTarget>
					<modules>
						<module>com.candorgrc.idfusion.sandbox.IdfUxUiSandbox</module>
					</modules>
					<generateDirectory>src/main/java</generateDirectory>
					<codeServerPort>9876</codeServerPort>
					<port>8080</port>
					<i18nConstantsBundle>com.candorgrc.idfusion.sandbox.client.i18n.I18nConstants</i18nConstantsBundle>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler.plugin.version}</version>
				<configuration>
					<!-- Bug in Maven, logic is inverted. False means do incremental compilation
                                @see https://issues.apache.org/jira/browse/MCOMPILER-209 -->
					<useIncrementalCompilation>false</useIncrementalCompilation>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>

			<!-- exec maven plugin: npm, gulp -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${exec.plugin.version}</version>
				<executions>
					<!-- npm install -->
					<execution>
						<id>npm install</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<executable>npm</executable>
							<arguments>
								<argument>install</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- gulp -->
					<execution>
						<id>gulp build</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<executable>gulp</executable>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Copy project resources to the output directory -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${resources.plugin.version}</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${webappDirectory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/webapp</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Copy static web files before executing gwt:run -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${war.plugin.version}</version>
				<executions>
					<execution>
						<phase>compile</phase>
					</execution>
				</executions>
				<configuration>
					<webappDirectory>${webappDirectory}</webappDirectory>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<!-- Profiles for setting properties that are different for development 
		and production. -->
	<profiles>

		<!-- Development Mode profile; default -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<gwt.extraJvmArgs>-Xms128m -Xmx4g -Xss4096k</gwt.extraJvmArgs>
				<gwt.module.suffix></gwt.module.suffix>
				<skip.create.local.war.folder>false</skip.create.local.war.folder>
				<!-- GWT JavaScript compiler output -->
				<gwt.style>PRETTY</gwt.style>
				<gwt.logLevel>INFO</gwt.logLevel>
				<!-- reduces compiled JS size by disabling run-time checking of cast 
					operations -->
				<gwt.disableCastChecking>false</gwt.disableCastChecking>
				<!-- reduces compiled JS size by disabling some of java.lang.Class methods 
					(e.g. getName()); @bp set to 'false' in order to play nice with Java Reflection -->
				<gwt.disableClassMetadata>false</gwt.disableClassMetadata>
				<gwt.compiler.clusterFunctions>false</gwt.compiler.clusterFunctions>
				<gwt.compiler.inlineLiteralParameters>false</gwt.compiler.inlineLiteralParameters>
				<!-- DEPRECATED (thus set to FALSE): use Closure Compiler to further 
					optimize the output JS; Set this to FALSE or comment it when you want to 
					generate Compiler Metrics, otherwise the metrics will not be generated -->
				<gwt.compiler.enableClosureCompiler>false</gwt.compiler.enableClosureCompiler>
				<!-- DEPRECATED (thus set to FALSE): Enables JavaScript output suitable 
					for post-compilation by Closure Compiler -->
				<gwt.compiler.closureFormattedOutput>false</gwt.compiler.closureFormattedOutput>
				<!-- do NOT always recompile GWT; allow incremental compilation -->
				<gwt.compiler.force>false</gwt.compiler.force>
				<!-- set it to true when in Development Mode, as it will make your compilation 
					faster by skipping some of the normal steps. -->
				<gwt.draftCompile>true</gwt.draftCompile>
				<!-- If set to TRUE will throw '[ERROR] Current binding properties are 
					expanding to more than one permutation but per-file compilation requires 
					that each compile operate on only one permutation.' -->
				<gwt.compiler.incremental>false</gwt.compiler.incremental>
				<gwt.disableRunAsync>false</gwt.disableRunAsync>
				<!-- use the lowest level of GWT Compiler optimization for Development 
					Mode -->
				<gwt.compiler.optimizationLevel>0</gwt.compiler.optimizationLevel>
				<!-- do NOT use Aggressive GWT Compiler optimization for Development 
					Mode -->
				<gwt.compiler.disableAggressiveOptimization>true</gwt.compiler.disableAggressiveOptimization>
				<gwt.compiler.optimizeDataflow>false</gwt.compiler.optimizeDataflow>
				<gwt.compiler.ordinalizeEnums>false</gwt.compiler.ordinalizeEnums>
				<!-- EXPERIMENTAL: Emit extra information allow chrome dev tools to display 
					Java identifiers in many places instead of JavaScript functions. -->
				<gwt.compiler.methodNameDisplayMode>FULL</gwt.compiler.methodNameDisplayMode>
				<gwt.saveSource>true</gwt.saveSource>
				<!-- Enable JavaScript Source Maps -->
				<gwt.compiler.useSourceMaps>true</gwt.compiler.useSourceMaps>
				<!-- Fail compilation if any input file contains an error. -->
				<gwt.compiler.strict>true</gwt.compiler.strict>
			</properties>
		</profile>
	</profiles>

</project>
